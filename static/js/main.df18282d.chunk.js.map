{"version":3,"sources":["components/lead/index.js","components/copybtn/index.js","components/generatebtn/index.js","components/passcardfooter/index.js","components/passwordoutput/index.js","components/passcard/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Lead","CopyBtn","props","status","copyStatus","copy","copyPass","type","className","onClick","GenerateBtn","generatePass","useState","pwLength","setpwLength","handleFormSubmit","event","preventDefault","for","id","placeholder","name","onChange","target","value","onSubmit","PassCardFooter","password","PassOutput","generatedPass","readOnly","aria-label","PassCard","setPassword","setCopyStatus","numLength","parseInt","pwSource","genPass","i","x","length","charAt","Math","floor","random","stopPropagation","navigator","clipboard","writeText","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.df18282d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./lead.css\"\r\n\r\nfunction Lead() {\r\n  return (\r\n    <header>\r\n      <h1>KeyGen Secure Password Generation</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Lead;\r\n","import React from \"react\";\r\nimport \"./copyBtn.css\"\r\n\r\nfunction CopyBtn(props) {\r\n\r\n  const status = props.copyStatus\r\n  const copy = props.copyPass;\r\n\r\n  return (\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-warning\"\r\n          onClick={copy}\r\n        >\r\n          {status}\r\n        </button>\r\n  );\r\n}\r\n\r\nexport default CopyBtn;\r\n","import React, { useState } from \"react\";\r\nimport CopyBtn from \"../copybtn\";\r\n\r\nfunction GenerateBtn(props) {\r\n  const generatePass = props.generatePass;\r\n\r\n  const [pwLength, setpwLength] = useState();\r\n\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    generatePass(pwLength);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setpwLength(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-auto\">\r\n        <p className=\"lead\">Password Length: </p>\r\n      </div>\r\n      <div className=\"col-auto\">\r\n        <label for=\"pwLength\" className=\"visually-hidden\">\r\n          Password\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"inputLength\"\r\n          placeholder=\"\"\r\n          name=\"pwLength\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-auto\">\r\n        <button\r\n          id=\"generate\"\r\n          className=\"btn btn-success text-center\"\r\n          type=\"submit\"\r\n          onSubmit={handleFormSubmit}\r\n          onClick={handleFormSubmit}\r\n        >\r\n          GENERATE\r\n        </button>\r\n      </div>\r\n      <div className=\"col-auto\">\r\n        <CopyBtn copyStatus={props.copyStatus} copyPass={props.copyPass} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GenerateBtn;\r\n","import React from \"react\";\r\nimport GenerateBtn from \"../generatebtn/index\";\r\n\r\nfunction PassCardFooter(props) {\r\n  return (\r\n    <div className=\"card-footer\">\r\n      <GenerateBtn\r\n        generatePass={props.generatePass}\r\n        password={props.password}\r\n        copyPass={props.copyPass}\r\n        copyStatus={props.copyStatus}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PassCardFooter;\r\n","import React from \"react\";\r\nimport \"./passwordoutput.css\"\r\n\r\nfunction PassOutput(props) {\r\n\r\n  const generatedPass = props.password\r\n\r\n    return(\r\n        <div className=\"card-body\">\r\n          <textarea\r\n            readOnly\r\n            id=\"password\"\r\n            placeholder=\"Your Secure Password\"\r\n            value={generatedPass}\r\n            aria-label=\"Generated Password\"\r\n          ></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PassOutput;","import React, { useState } from \"react\";\r\nimport PassCardFooter from \"../passcardfooter/index\";\r\nimport PassOutput from \"../passwordoutput/index\";\r\nimport \"./passcard.css\";\r\n\r\nfunction PassCard() {\r\n  const [password, setPassword] = useState();\r\n  const [copyStatus, setCopyStatus] = useState(\"Copy\");\r\n\r\n  // Generates a password of the specified length if conditions are met\r\n  const generatePass = (pwLength) => {\r\n    let numLength = parseInt(pwLength);\r\n\r\n    let pwSource =\r\n      \"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.!@#$%^&*.,?\";\r\n    let genPass = \"\";\r\n\r\n    if (numLength >= 8 && numLength <= 128) {\r\n      for (let i = 0, x = pwSource.length; i < numLength; i++) {\r\n        genPass += pwSource.charAt(Math.floor(Math.random() * x));\r\n      }\r\n      setPassword(genPass);\r\n    } else {\r\n      setPassword(\r\n        \"You require more pylons! Please select a number between 8 and 128.\"\r\n      );\r\n    }\r\n\r\n    setCopyStatus(\"Copy\");\r\n  };\r\n\r\n  // Copies password output to clipboard on click.\r\n  const copyPass = () => {\r\n    navigator.clipboard.writeText(password);\r\n    setCopyStatus(\"Copied!\");\r\n  };\r\n\r\n  const handleFormCopy = (event) => {\r\n    event.stopPropagation();\r\n    copyPass();\r\n  };\r\n\r\n  return (\r\n    <div className=\"card bg-dark\">\r\n      <div className=\"card-header\">\r\n        <h2 className=\"text-center\">Generate Password</h2>\r\n      </div>\r\n      <PassOutput password={password} />\r\n      <PassCardFooter\r\n        generatePass={generatePass}\r\n        password={password}\r\n        copyPass={handleFormCopy}\r\n        copyStatus={copyStatus}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PassCard;\r\n","import Lead from \"./components/lead/index\";\nimport PassCard from \"./components/passcard/index\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Lead />\n      <PassCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}