{"version":3,"sources":["components/copybtn/index.js","components/generatebtn/index.js","components/passcardfooter/index.js","components/passwordoutput/index.js","components/passcard/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["CopyBtn","props","status","copyStatus","copy","copyPass","className","id","type","onClick","aria-hidden","GenerateBtn","generatePass","handleFormSubmit","event","preventDefault","onSubmit","PassCardFooter","password","PassOutput","generatedPass","readOnly","placeholder","value","aria-label","PassCard","useState","setPassword","setCopyStatus","genPass","Entropy","bits","charset","charSet32","string","stopPropagation","navigator","clipboard","writeText","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8b21c930.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./copyBtn.css\"\r\n\r\nfunction CopyBtn(props) {\r\n\r\n  const status = props.copyStatus\r\n  const copy = props.copyPass;\r\n\r\n  return (\r\n        // <button\r\n        //   type=\"button\"\r\n        //   className=\"btn btn-warning\"\r\n        //   onClick={copy}\r\n        // >\r\n        //   {status}\r\n        // </button>\r\n        <button\r\n          className=\"cybr-btn mt-2\"\r\n          id=\"generate\"\r\n          type=\"button\"\r\n          onClick={copy}\r\n        >\r\n          {status}<span aria-hidden>_</span>\r\n          <span aria-hidden className=\"cybr-btn__glitch\">\r\n            GENERATE_\r\n          </span>\r\n          <span aria-hidden className=\"cybr-btn__tag\">\r\n            C77\r\n          </span>\r\n        </button>\r\n  );\r\n}\r\n\r\nexport default CopyBtn;\r\n","import React from \"react\";\r\nimport CopyBtn from \"../copybtn\";\r\n\r\nfunction GenerateBtn(props) {\r\n  const generatePass = props.generatePass;\r\n\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    generatePass();\r\n  };\r\n\r\n  return (\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-auto\">\r\n        <button\r\n          className=\"cybr-btn mt-2\"\r\n          id=\"generate\"\r\n          type=\"submit\"\r\n          onSubmit={handleFormSubmit}\r\n          onClick={handleFormSubmit}\r\n        >\r\n          GENERATE<span aria-hidden>_</span>\r\n          <span aria-hidden className=\"cybr-btn__glitch\">\r\n            GENERATE_\r\n          </span>\r\n          <span aria-hidden className=\"cybr-btn__tag\">\r\n            C77\r\n          </span>\r\n        </button>\r\n      </div>\r\n      <div className=\"col-auto\">\r\n        <CopyBtn copyStatus={props.copyStatus} copyPass={props.copyPass} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GenerateBtn;\r\n","import React from \"react\";\r\nimport GenerateBtn from \"../generatebtn/index\";\r\n\r\nfunction PassCardFooter(props) {\r\n  return (\r\n    <div className=\"card-footer\">\r\n      <GenerateBtn\r\n        generatePass={props.generatePass}\r\n        password={props.password}\r\n        copyPass={props.copyPass}\r\n        copyStatus={props.copyStatus}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PassCardFooter;\r\n","import React from \"react\";\r\nimport \"./passwordoutput.css\"\r\n\r\nfunction PassOutput(props) {\r\n\r\n  const generatedPass = props.password\r\n\r\n    return(\r\n        <div className=\"card-body\">\r\n          <textarea\r\n            readOnly\r\n            id=\"password\"\r\n            placeholder=\"Your Secure Password\"\r\n            value={generatedPass}\r\n            aria-label=\"Generated Password\"\r\n          ></textarea>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PassOutput;","import React, { useState } from \"react\";\r\nimport { Entropy, charSet32 } from \"entropy-string\";\r\nimport PassCardFooter from \"../passcardfooter/index\";\r\nimport PassOutput from \"../passwordoutput/index\";\r\nimport \"./passcard.css\";\r\n\r\nfunction PassCard() {\r\n  const [password, setPassword] = useState();\r\n  const [copyStatus, setCopyStatus] = useState(\"Copy\");\r\n\r\n  // Generates a crytographically secure sequence of characters with 128 bits of entropy\r\n  const generatePass = () => {\r\n\r\n    const randomizer = new Entropy({ bits: 128, charset: charSet32 })\r\n    const genPass = randomizer.string()\r\n\r\n    setPassword(genPass)\r\n\r\n    setCopyStatus(\"Copy\");\r\n  };\r\n\r\n  // Copies password output to clipboard on click.\r\n  const copyPass = () => {\r\n    navigator.clipboard.writeText(password);\r\n    setCopyStatus(\"Copied!\");\r\n  };\r\n\r\n  const handleFormCopy = (event) => {\r\n    event.stopPropagation();\r\n    copyPass();\r\n  };\r\n\r\n  return (\r\n    <section className=\"glass-card\" id=\"passcard\">\r\n      <div className=\"card-header\">\r\n        <h2 className=\"text-center\">Generate Password</h2>\r\n      </div>\r\n      <PassOutput password={password} />\r\n      <PassCardFooter\r\n        generatePass={generatePass}\r\n        password={password}\r\n        copyPass={handleFormCopy}\r\n        copyStatus={copyStatus}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default PassCard;\r\n","\nimport PassCard from \"./components/passcard/index\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <PassCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}